   1 : -- File pde2bv.lua --
   2 : -- Code for PDE BV problems in 2 dimensions -- rectangular grid of points
-------	
 442 : pde2bv = function(feqs,x,y,u,tpsola) -- 2 spatial dimensions PDE Solver
 443 : 	if type(tpsola)~='table' then tpsola = {tpsola} end
 444 : 	local tpsol,rx,ry = tpsola[1] or SPM, tpsola[2], tpsola[3] or tpsola[2]-- Default to sparse matrix solution
 445 : 	local umx,errm,a,b,n,uxy,ndg = 0.0
 446 : 	local nx,ny = #x, #y
 447 : 	local uold,ua,n,itmx = {},{},nx*ny,0
 448 : 	local ur = Spmat.new(nx,-ny)
 449 : 	if linear==1 then nnmx=1 else nnmx=NMX end -- One Newton cycle for linear eqns
 450 : 	if tpsol==ADI then ndg = 1 end
 451 : 	uold[0] = {u[0][1],u[0][2],u[0][3]}
 452 : 	ua[0] = {u[0][1],u[0][2],u[0][3]}
 453 : 	if #u==n then uxy=false else uxy=true end
 454 : 	for j=1,ny do
 455 : 		for i=1,nx do
 456 : 			k = i + (j-1)*nx
 457 : 			if uxy then ua[k] = u[j][i] else ua[k] = u[k] end
 458 : 		end
 459 : 	end
 460 : 	for k=1,n do uold[k],umx,ua[k] = ua[k], max(umx,ua[k]), 0.0 end
 461 : 	for int=1,nnmx do -- Newton iterative loop
 462 : 		a,b = setup2bveqs(feqs,x,y,uold,ndg)
 463 : 		if tpsol==SPM then -- Solve with spgauss, sparse matrix solver
 464 : 			sdgauss(a,b); ua = b -- b is new solution
 465 : 		elseif tpsol==COE then -- Solve with Chebychev odd/even SOR
 466 : 			ua = pde2bvcoe(a,b,ua,rx,umx)
 467 : 		elseif tpsol==SOR then -- Solve with SOR
 468 : 			ua = pde2bvsor(a,b,ua,rx,umx)
 469 : 		elseif tpsol==ADI then -- Solve with ADI
 470 : 			if rx==nil then rx = -abs(x[nx]-x[1]) end
 471 : 			if ry==nil then ry = -abs(y[ny]-y[1]) end
 472 : 			ua = pde2bvadi(a,b,ua,rx,ry,umx)
 473 : 		else print('Unknown type solution request:',tpsol,' in pde2bv')
 474 : 		end
 475 : 		errm,umx,itmx = 0.0,0.0,itmx+1
 476 : 		for k=1,n do errm,uold[k] = max(errm,abs(ua[k])), uold[k]+ua[k] end
 477 : 		for k=1,n do umx,ua[k] = max(umx,abs(uold[k])), 0.0 end
 478 : 		if nprint~=0 then print('Completed Newton iteration',int,'with correction',errm); io.flush()
 479 : 			if seeplot~=0 then if seeplot==1 then splot(to2darray(uold)) else cplot(to2darray(uold)) end end end
 480 : 		if errm<ERR*umx then itmx = int; break end
 481 : 	end
 482 : 	if itmx==NMX then print('Maximum number of iterations exceeded in pde2bv!!')
 483 : 		io.flush() end
 484 : 	if uxy==false then return uold,errm,itmx
 485 : 	else
 486 : 		for j=1,ny do ur[j] = {}; for i=1,nx do k = i+(j-1)*nx; ur[j][i] = uold[k] end end
 487 : 		return ur,errm,itmx
 488 : 	end
 489 : end
 490 : setfenv(pde2bv,{sdgauss=sdgauss,max=math.max,abs=math.abs,table=table,
 491 : setup2bveqs=setup2bveqs,pde2bvcoe=pde2bvcoe,pde2bvsor=pde2bvsor,pde2bvadi=pde2bvadi,
 492 : io=io,getfenv=getfenv,linear=0,SPM=1,COE=2,SOR=3,ADI=4,NMX=50,ERR=1.e-5,print=print,
 493 : type=type,nprint=0,io=io,Spmat=Spmat,seeplot=0,cplot=cplot,splot=splot,to2darray=to2darray})
