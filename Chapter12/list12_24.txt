   1 : -- File list12_24.lua --
   2 : -- Example of BV problem in 2 dimensions -- rectangular grid of points
   3 : 
   4 : require"pde2bv"
   5 : Vm = 1.0 -- Define equations to be solved
   6 : pi = math.pi;pi2 = 2*pi^2; sin=math.sin
   7 : feq = function(x,y,uxx,ux,u,uy,uyy,i,j)
   8 : 	return uxx + uyy + Vm*pi2*sin(pi*x)*sin(pi*y)
   9 : end -- Now Zero boundary values
  10 : fb = function(x,u,uy,ux,i) return u end
  11 : ft = function(x,u,uy,ux,i) return u end
  12 : fr = function(y,u,ux,uy,j) return u end
  13 : fl = function(y,u,ux,uy,j) return u end
  14 : 
  15 : x,y,u = {},{},{}; xmax,ymax = 1.0,1.0
  16 : Nx,Ny = 50,50
  17 : nx,ny = Nx+1,Ny+1; n = nx*ny
  18 : for i=1,nx do x[i] = xmax*(i-1)/Nx end
  19 : for i = 1,ny do y[i] = ymax*(i-1)/Ny end
  20 : for j = 1,ny do	-- Set zero initial values
  21 : 	u[j] = {}; 	for i = 1,nx do u[j][i] = 0 end
  22 : end
  23 : 
  24 : a,b = setup2bveqs({feq,fb,ft,fl,fr},x,y,u)
  25 : 
  26 : t = os.time()
  27 : ua = {}
  28 : for j=1,ny do
  29 : 	for i=1,nx do ua[i+(j-1)*nx] = u[j][i] end
  30 : end	
  31 : 
  32 : rsp = ((x[2]-x[1])/(y[2]-y[1]))^2 -- Needed for lan
  33 : rsp = ((math.cos(math.pi/nx)+rsp*math.cos(math.pi/ny))/(1+rsp))
  34 : p4 = rsp^2/4; jprint=0; nprint = math.min(Nx,Ny)/4
  35 : print('theoritical lan = ',2/(1+math.sqrt(1-rsp^2)))
  36 : 
  37 : function sdloop(a,b,ua,itt)
  38 : 	local uold,jpold,lan = {},0,1
  39 : 	lan = 1.0
  40 : 	for k=1,itt do
  41 : 		ua,merr = sdsolve(a,b,ua,lan)
  42 : 		jprint = math.floor(k/nprint)
  43 : 		if jprint==jpold then
  44 : 			jpold=jprint+1
  45 : 			print("Completed iteration",k,"with correction",merr,lan); io.flush()
  46 : 		end
  47 : 		lan = 1/(1- lan*p4) -- Update lan
  48 : 	end
  49 : 	return ua
  50 : end	
  51 : 
  52 : ua = sdloop(a,b,ua,250)
  53 : print('time = ',os.time()-t)
  54 : bb = to2darray(ua,Nx,Ny)
  55 : splot(bb); write_data('list12_24.dat',bb)
