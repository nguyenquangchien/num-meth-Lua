   1 : -- /* File list12_18.lua */
   2 : -- Program for transient solution of Schrodinger Wave Equation
   3 : 
   4 : require"Complex"; math.abs = Complex.abs -- Complex algebra
   5 : require"odefd"; require"pdeivbv"
   6 : require"intp"; require"intg"
   7 : getfenv(pdeivbv).nprint = 1 -- monitor progress
   8 : getfenv(pdebbviv).umin = {5.e-4,5.e-4,5.e-4}
   9 : getfenv(odefd).NMAX = 1
  10 : 
  11 : tomagsq = function(s) -- Convert to magnitude squared
  12 : 	ns,nv = #s, #s[2]
  13 : 	for i=2,ns do 
  14 : 		for k=1,nv do s[i][k] = math.abs(s[i][k])^2 end
  15 : 	end
  16 : 	return s
  17 : end
  18 : sqarea = function(x,y) -- Calculate area under wavefunction
  19 : 	local nx, sum = #x-1, 0
  20 : 	for i=1,nx	do -- works for nonumiform spatial grid
  21 : 		sum = sum + (x[i+1]-x[i])*(math.abs(y[i+1])^2+math.abs(y[i])^2)
  22 : 	end
  23 : 	return sum/2
  24 : end
  25 : 
  26 : -- Normalized Schrodinger equation to be solved
  27 : eq = function(fv,x,t,v,vp,vpp,vt) 
  28 : 	fv[1] = j*vt[1] + vpp[1] -- V =0 term
  29 : end
  30 : efl = function(fv,v,vp) -- Zero boundary value
  31 : 	fv[1] = v[1]
  32 : end
  33 : efr = function(fv,v,vp) -- Zero boundary value
  34 : 	fv[1] = v[1]
  35 : end
  36 : 
  37 : x = {}; nx = 1000 -- Set initial parameters
  38 : L, alf, bet = 1, 75, 100
  39 : xo = .5*L
  40 : for i=1,nx+1 do x[i] = L*(-1 + (i-1)*2/nx) end
  41 : 
  42 : v = {{}} -- Set initial voltage values
  43 : vp,vpp = {{}}, {{}}
  44 : for i=1,nx+1 do
  45 : 	xv = x[i]
  46 : 	v[1][i] = math.exp(-alf*(xv+xo)^2)*Complex.exp(bet*j*xv)
  47 : end
  48 : v[1][1] = Complex.new(0,0); v[1][nx+1] = v[1][1]
  49 : 
  50 : sum =sqarea(x,v[1])^0.5; print('P = ',sum)
  51 : for i=1,nx+1 do v[1][i] = v[1][i]/sum end
  52 : print('Now P = ',sqarea(x,v[1]))
  53 : 
  54 : tvals = {0,{1.e-6,1.e-5},1,5} -- Starter solution, to conserve P
  55 : s = pdeivbvqs({eq,efl,efr},tvals,x,v,vp,vpp)
  56 : sum = sqarea(s[1],s[3]); print('After initial short interval, P = ',sum)
  57 : 
  58 : tvals = {0,.08,160,10,{-.75,-.5,-.25,0,.25,.5,.75}}
  59 : s,st = pdeivbvt({eq,efl,efr},tvals,x,v,vp,vpp)
  60 : sum = sqarea(s[1],s[#s]); print('After final solution, P = ',sum)
  61 : 
  62 : write_data('list12_18.dat',tomagsq(s)) -- Save data as probability density
  63 : write_data('list12_18t.dat',tomagsq(st))
