   1 : -- /* File list12_13.lua */
   2 : -- Program for transient solution of transmission line
   3 : 
   4 : require"odefd"; require"pdeivbv"
   5 : getfenv(pdeivbv).nprint = 1
   6 : getfenv(ode2bvfd).umin = {5.e-4,5.e-4,5.e-4}
   7 : --getfenv(ode2bvfd).nprint = 1 
   8 : 
   9 : tt = os.time()
  10 : -- Model equations to be solved
  11 : Zo = 50
  12 : Rr = 0 -- Series resistance factor
  13 : Rg = 0 -- Parallel conductance factor
  14 : Rs = 100 -- Source resistance
  15 : Rl = 100 -- Load resistance
  16 : vs = 1.0 -- Step value of source voltage
  17 : w = 4*math.pi; Rrg, Rrpg = Rr*Rg, Rr + Rg
  18 : 
  19 : eq = function(fv,x,t,v,vp,vpp,vt,vtt) -- Equations with time and spatial derivatives
  20 : 	fv[1] = vpp[1] - Rrg*v[1] - Rrpg*vt[1] - vtt[1] -- Second order equations
  21 : 	fv[2] = vpp[2] - Rrg*v[2] - Rrpg*vt[2] - vtt[2]
  22 : 	--fv[1] = vp[1]  + Zo*(Rr*v[2] + vt[2]) -- First order equations
  23 : 	--fv[2] = Zo*vp[2] +Rg*v[1]+ vt[1]
  24 : end
  25 : 
  26 : efl = function(fv,v,vp,t,vt) -- Using mixed boundary condition
  27 : 	fv[1] = vs*math.sin(w*t) - v[1] - Rs*v[2]
  28 : 	fv[2] = vp[1] + Zo*(Rr*v[2] + vt[2])
  29 : end
  30 : efr = function(fv,v,vp,t,vt) -- Using mixed boundary condition
  31 : 	fv[1] = v[2] -- Open circuit at load, I = 0
  32 : 	--fv[1] = v[1] -- Short circuit at load, V = 0
  33 : 	--fv[1] = v[1] - Rl*v[2] -- Load resistace of Rl at load, V = Rl*I
  34 : 	fv[2] = Zo*vp[2] + Rg*v[1] + vt[1]
  35 : end
  36 : 
  37 : x = {}; nx = 500; L = 1 -- Define x values
  38 : for i=1,nx+1 do x[i] = L*(i-1)/nx end
  39 : 
  40 : v = {{},{}} -- Set initial voltage values, V = 0, I = 0 for all x values
  41 : for i=1,nx+1 do
  42 : 	v[1][i] = 0; v[2][i] = 0
  43 : end
  44 : tvals = {0,10,100,40,{0,.25,.5,.75,1}} 
  45 : s,st = pdeivbvt({eq,efl,efr},tvals,x,v,vp,vpp)
  46 : write_data(2,'list12_13_1.dat',s)
  47 : write_data('list12_13t_1.dat',st)	
  48 : print('time taken for calculation = ',os.time()-tt); tt = os.time()
  49 : 
  50 : efr = function(fv,v,vp,t,vt) -- Using mixed boundary condition
  51 : 	--fv[1] = v[2] -- Open circuit at load, I = 0
  52 : 	fv[1] = v[1] -- Short circuit at load, V = 0
  53 : 	--fv[1] = v[1] - Rl*v[2] -- Load resistace of Rl at load, V = Rl*I
  54 : 	fv[2] = Zo*vp[2] + Rg*v[1] + vt[1]
  55 : end
  56 : 
  57 : for i=1,nx+1 do
  58 : 	v[1][i] = 0; v[2][i] = 0 -- v[2] is current variable
  59 : end
  60 : tvals = {0,10,100,40,{0,L/4,L/2,3*L/4,L}} 
  61 : s,st = pdeivbvt({eq,efl,efr},tvals,x,v,vp,vpp)
  62 : write_data(2,'list12_13_2.dat',s)
  63 : write_data('list12_13t_2.dat',st)	
  64 : print('time taken for calculation = ',os.time()-tt); tt = os.time()
  65 : 
  66 : efr = function(fv,v,vp,t,vt) -- Using mixed boundary condition
  67 : 	--fv[1] = v[2] -- Open circuit at load, I = 0
  68 : 	--fv[1] = v[1] -- Short circuit at load, V = 0
  69 : 	fv[1] = v[1] - Rl*v[2] -- Load resistace of Rl at load, V = Rl*I
  70 : 	fv[2] = Zo*vp[2] + Rg*v[1] + vt[1]
  71 : end
  72 : 
  73 : for i=1,nx+1 do
  74 : 	v[1][i] = 0; v[2][i] = 0
  75 : end
  76 : tvals = {0,10,100,40,{0,L/4,L/2,3*L/4,L}} 
  77 : s,st = pdeivbvt({eq,efl,efr},tvals,x,v,vp,vpp)
  78 : write_data(2,'list12_13_3.dat',s)
  79 : write_data('list12_13t_3.dat',st)	
  80 : print('time taken for calculation = ',os.time()-tt); tt = os.time()
  81 : 
