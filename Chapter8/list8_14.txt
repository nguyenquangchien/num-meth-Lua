   1 : -- /* File list8_14.lua */ MC analysis of mean and std limits
   2 : 
   3 : require"prob"
   4 : local Pn = elemfunc.Pn
   5 : 
   6 : yield = {}
   7 : read_data('steel_yield.txt',yield) -- Read data file -- change as desired
   8 : nd = #yield; snd = math.sqrt(nd)
   9 : mean,std = stats(yield) -- Mean and std
  10 : xd,yd = makeCDF(yield) -- CDF data
  11 : print('Number of data, mean, std = ',nd,engr(mean),engr(std))
  12 : nmc = 10000 -- Number of Monte Carlo runs
  13 : 
  14 : Pnms = function(x,m,s) return Pn((x-m)/s) end -- Gaussian with m and s
  15 : 
  16 : ymn,xmn = {},{}
  17 : mmc,mstd,Dn = {},{},{} -- collect mean and std for MC runs
  18 : for j=1,nmc do -- Begin MC runs
  19 : 	for i=1,nd do -- Generate MC data set
  20 : 		ymn[i] = std*gnormal()+mean
  21 : 	end
  22 : 	mmc[j],mstd[j]	= stats(ymn) -- Now evaluate mean and std
  23 : 	xmn,ymn = makeCDF(ymn) -- CDF for Dn evaluation
  24 : 	Dn[j] = 0
  25 : 	for i=1,nd do -- Step over data set, collect Dn data
  26 : 		dt = math.abs(ymn[i] - Pnms(xmn[i],mean,std))
  27 : 		if dt>Dn[j] then Dn[j] = dt end
  28 : 	end
  29 : end
  30 : pbv = {68.27,95.45,90,95,99,99.9}
  31 : np = #pbv
  32 : for j=1,nmc do Dn[j] = snd*Dn[j] end -- Final K-S statistic
  33 : x,y = makeCDF(mmc) -- CDF of MC mean values
  34 : for i=1,np do print('Limits for mean at '..engr(pbv[i],'%')..' = ',climits(x,pbv[i])) end
  35 : write_data('list8_14a.dat',x,y)
  36 : x,y = makeCDF(mstd) -- CDF of MC std values
  37 : for i=1,np do print('Limits for std at     '..engr(pbv[i],'%')..' = ',climits(x,pbv[i])) end
  38 : write_data('list8_14b.dat',x,y)
  39 : x,y = makeCDF(Dn) -- CDF of MC D values
  40 : for j=1,nmc do y[j] = 1 - y[j] end
  41 : write_data('list8_14c.dat',x,y)
  42 : 
