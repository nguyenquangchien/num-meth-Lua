   1 : -- /* File list6_6.lua */ -- Normal curve of error function definition
   2 : require"intp"; require"intg"
   3 : 
   4 : ncerr = function() -- Error function using 22 data points
   5 : 	local x1,y1,x2,y2,x2t,y2t = {},{},{},{},{},{}
   6 : 	local f1 = function(x) return math.exp(-x^2/2) end -- Normal curve
   7 : 	local f2 = function(x) return f1(1/x)/x^2 end -- Folded normal curve
   8 : 	local i = 2
   9 : 	x1[1],y1[1] = 0,0
  10 : 	for xi=.1,1.01,.1 do -- Integral from 0 to 1
  11 : 		x1[i],y1[i] = xi, intg(xi-.1,xi,f1)/math.sqrt(2*math.pi)+y1[i-1]
  12 : 		i = i+1
  13 : 	end
  14 : 	i = 2
  15 : 	x2[1],y2[1] = 1,y1[#x1]
  16 : 	for xi=.9,-.01,-.1 do -- Integral from 1 to infinity
  17 : 		x2[i],y2[i] = xi, intg(xi,xi+.1,f2)/math.sqrt(2*math.pi)+y2[i-1]
  18 : 		i = i+1
  19 : 	end
  20 : 	local n = #x2 -- Need to reverse table entries
  21 : 	for i=1,n do y1[i],y2[i] = .5*y1[i]/y2[n],.5*y2[i]/y2[n] end -- Exactly .5 max
  22 : 	for i=1,n do x2t[i],y2t[i] = x2[n+1-i],y2[n+1-i] end
  23 : 	x2,y2 = x2t,y2t -- Now have increasing x2 values
  24 : 	return function(x) -- Return Normal cumulative error function
  25 : 		if x>=0 then
  26 : 			if x<=1 then return intp(x1,y1,x)+0.5
  27 : 			else return intp(x2,y2,1/x)+0.5 end
  28 : 		else 
  29 : 			if x<-1 then return 0.5-intp(x2,y2,-1/x)
  30 : 			else return 0.5-intp(x1,y1,-x) end
  31 : 		end
  32 : 	end
  33 : end
  34 : -- Now test function
  35 : i,x2t,y2t = 1,{},{} -- Now test function
  36 : errfcn = ncerr()
  37 : for x=-3,3,.5 do
  38 : 	x2t[i],y2t[i],i = x, errfcn(x), i+1
  39 : 	print(x,y2t[i-1])
  40 : end
  41 : write_data("list6_6.dat",x2t,y2t)
