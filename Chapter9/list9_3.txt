   1 : -- /* File list9_3.lua */ -- MC analysis for Figure 9.1
   2 : 
   3 : requires("nlstsq","mcpar")
   4 : 
   5 : xd,yd = {},{} -- Data arrays
   6 : read_data('list7_1.dat',xd,yd) -- Read in data set to be fitted
   7 : 
   8 : ft = function(x,c) -- Define function to fit data
   9 : 	return c[1]*x[2]/(x[2]^c[2]+c[3])^(1/c[2]) - x[1]
  10 : end
  11 : 
  12 : c = {1,2,100}; nc = #c -- Initial guess at coefficients
  13 : del,err,nmax = nlstsq({yd,xd},fw,ft,c,actv,step) -- Call fiting 
  14 : print(err,nmax); io.flush() -- print results
  15 : for i=1,nc do printf('c[%d] = %12.4e +/- %12.4e\n',i,c[i],del[i]) end
  16 : -- Now perform MC simulations
  17 : getfenv(MCpar).nprint=1 -- Follow MC development
  18 : step = {1.1,1.1,1.2}
  19 : cvar,nm = MCpar({yd,xd},fw,ft,c,actv,step) -- default 1000 MC loops
  20 : print('Maximum Newton iterations =',nm)
  21 : -- Analyze results
  22 : xcdf,ycdf = {},{}
  23 : for i=1,nc do xcdf[i],ycdf[i] = makeCDF(cvar[i]) end
  24 : write_data('list9_3.dat',cvar[1],cvar[2],cvar[3],xcdf[1],ycdf[1],xcdf[2],ycdf[2],xcdf[3],ycdf[3])
  25 : for i=1,nc do plot(xcdf[i],ycdf[i]) end
  26 : for i=1,nc do stem(hist(cvar[i],40)) end
  27 : for i=1,nc do print(stats(cvar[i])) end
  28 : -- Correlation plots
  29 : scatterplot(cvar[1],cvar[2]); scatterplot(cvar[1],cvar[3]); scatterplot(cvar[2],cvar[3])
  30 : prob = {68.27,95.45,90,95,99,99.9}
  31 : np = #prob
  32 : for j=1,nc do
  33 : 	print('') -- spacer line
  34 : 	for i=1,np do printf('Limits for c[%d] at %s = %12.4e  to  %12.4e\n',j,engr(prob[i],'%'),
  35 : 		climits(xcdf[j],prob[i])) end
  36 : end
  37 : 
