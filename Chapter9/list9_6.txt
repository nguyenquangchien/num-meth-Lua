   1 : -- /* File list9_6.lua */ -- General file for data fitting, Parameter estimation 
   2 : 
   3 : requires("nlstsq","mcpar","DataFit","cltwodim")
   4 : 
   5 : -- Section 1. Input data file and define fitting function
   6 : -- Change lines 6 through 14 for different data sets
   7 : infile = 'DanWood'
   8 : xd,yd = {},{}; read_data(infile..'.txt',yd,xd) -- y stored first
   9 : nd = #xd
  10 : 
  11 : ft = function(x,c) -- Define function to fit data
  12 : 	return c[1]*x[2]^c[2] - x[1]
  13 : end
  14 : c = {1,1}; nc = #c -- Initial approximations. End of changes for most data sets
  15 : 
  16 : -- Section 2. Perform data fit and print fitted parameters
  17 : del,err,nm = nlstsq({yd,xd},fw,ft,c) -- Call fiting, print max iterations 
  18 : print('Max iteration number =',nm)
  19 : for i=1,nc do printf('c[%d] = %12.4e +/- %12.4e\n',i,c[i],del[i]) end
  20 : 
  21 : -- Section 3. Generate 6-Plot Data, Only Plots 1,2,3 and 6 are used here
  22 : ycalc,res = {},{} -- Calculate fitted values and residuals
  23 : for i=1,nd do ycalc[i] = ft({0,xd[i]},c); res[i] = yd[i] - ycalc[i] end
  24 : fres1,fres2 = datafit({res,xd}), datafit({res,yd}) -- Fit residuals
  25 : yres1,yres2,xyp,xypn = {},{},{},{}
  26 : for i=1,nd do yres1[i],yres2[i] = fres1(xd[i]),fres2((ycalc[i])) end
  27 : xyp[1],xyp[2] = makeCDF(res); xypn[1],xypn[2] = normalCDF(res) -- CDF data for residuals
  28 : plot('test2.gfx',{xd,yd,ycalc},{"Data plot"}); 
  29 : scatterplot(xd,yres2,res,{"Residual vs X","X","Res"})
  30 : scatterplot(ycalc,yres2,res,{"Residual vs Y","Y","Res"}); plot(xyp,xypn,{"CDF plot","Res","CDF"}) 
  31 : write_data(infile..'a.dat',xd,yd,ycalc,res,yres1,yres2,xyp,xypn)
  32 : 
  33 : -- Section 4. Generate MC Data
  34 : cvar = MCpar({yd,xd},fw,ft,c) -- 1000 MC loops -- default value
  35 : xcdf,ycdf = {},{}
  36 : for i=1,nc do xcdf[i],ycdf[i] = makeCDF(cvar[i]) end
  37 : scatterplot(cvar[1],cvar[2],{"c[2] vs c[1]","c[1]","c[2]"}); 
  38 : if nc>2 then scatterplot(cvar[1],cvar[3],{"c[3] vs c[1]","c[1]","c[3]"})
  39 : 	scatterplot(cvar[2],cvar[3],{"c[3] vs c[2]","c[2]","c[3]"}) end
  40 : prob = {68.27,95.45,90,95,99,99.9}; np = #prob
  41 : print('Individual confidence limits')
  42 : for j=1,nc do
  43 : 	for i=1,np do printf('Limits for c[%d] at %s = %12.4e  to  %12.4e\n',j,engr(prob[i],'%'),
  44 : 		climits(xcdf[j],prob[i])) end
  45 : end
  46 : 
  47 : -- Section 5. Generate data for joint confidence bounds
  48 : cl,xyb,cx = cltwodim(cvar[1],cvar[2],90); cl2,xyb2,cx2 = cltwodim(cvar[1],cvar[2],95)
  49 : print('Joint confidence limits')
  50 : for i=1,2 do
  51 : 	for j=1,2 do print('c['..i..'], 95% limits = ',cl2[i][j],'90% limits = ',cl[i][j]) end
  52 : end
  53 : scatterplot(cvar[1],cvar[2],cx,cx2,'with lines',xyb,xyb2,{"c[2] vs c[1] with limits","c[1]","c[2]"}) -- Joint confidence limits plot
  54 : write_data(infile..'b.dat',cvar,xyb,cx,xyb2,cx2)
