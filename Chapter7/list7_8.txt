   1 : --/* File nlstsq.lua */
   2 : 
   3 : require "gauss"; require"Minv" -- Matrix inversion needed
   4 : nlstsq = function(x, fw, f, c, actv, step)
   5 : 	actv,step,fw = actv or {},step or {},fw or {}
   6 : 	local nx,nd,nc = #x,#x[1],#c
   7 : 	local iend,nend,cv,cmax,err = 0, NMAX -- Maximum Number of iterations
   8 : 	local del,p,wk1,wk2,rowptr,b,fx = {},{},{},{},{},{},{} -- Work arrays
   9 : 	for i=1,nc do 
  10 : 		rowptr[i],step[i],actv[i] = {},step[i] or 0,actv[i] or 1 -- Row pointers
  11 : 		if step[i]>1.0 then step[i] = 1./step[i] end
  12 : 	end
  13 : 	for ilp=1,NMAX do -- Main loop for Newton iterations
  14 : 		ix = 1
  15 : 		for i=1,nc do -- Loop over C coefficients
  16 : 			if actv[i]~=0 then -- An active coefficient
  17 : 				b[ix],row,wk2[ix] = 0.0, rowptr[ix], {}
  18 : 				for j=1,nc do row[j] = 0.0 end -- Initialize row of matrix to zero
  19 : 				dx = FACT*c[i] -- Set up dC factors for partial derivatives
  20 : 				if dx==0.0 then dx = FACT end
  21 : 				wk1[ix], ix = dx, ix+1 -- Store dC factors for later use
  22 : 			end
  23 : 		end
  24 : 		for k=1,nd do -- Evaluate function at data points
  25 : 			for i=1,nx do p[i] = x[i][k] end
  26 : 			fx[k] = newtonfc(f, p, c)
  27 : 		end -- fx[k] has function values at data points
  28 : 		ix, jx = 1, 1
  29 : 		for i=1,nc do -- Loop over active coefficients
  30 : 			if actv[i]~=0 then
  31 : 				c1, dx = c[i], wk1[ix]
  32 : 				c[i] = c1+dx
  33 : 				pwk2 = wk2[ix] -- Pointer to work array
  34 : 				for k=1,nd do -- Loop over data points
  35 : 					for i=1,nx do p[i] = x[i][k] end
  36 : 					pwk2[k] = (newtonfc(f, p, c) -fx[k])/dx -- Partial derivative
  37 : 				end
  38 : 				c[i], ix = c1, ix+1
  39 : 			end
  40 : 		end -- Partial derivatives stored in wk2[i][k] arrays
  41 : 		for j=1,nc do -- Loop over active rows in matrix
  42 : 			if actv[j]~=0 then
  43 : 				row, pwk2 = rowptr[jx], wk2[jx] -- pointer to matrix & wk2 row
  44 : 				for k=1,nd do -- Loop over data points
  45 : 					b[jx] = b[jx] + (x[1][k] - fx[k])*pwk2[k]*(fw[k] or 1)
  46 : 				end
  47 : 				ix = 1
  48 : 				for i=1,nc do -- Accumulate row of a[][] matrix
  49 : 					if actv[i]~=0 then 
  50 : 						pwk3 = wk2[ix] -- Another pointer to partial derivatives
  51 : 						for k=1,nd do -- Loop over data points
  52 : 							row[ix] = row[ix] + pwk3[k]*pwk2[k]*(fw[k] or 1)
  53 : 						end
  54 : 						ix = ix+1
  55 : 					end
  56 : 				end
  57 : 				jx = jx+1
  58 : 			end
  59 : 		end -- Back for another coefficient
  60 : 		if iend==0 then -- Update values except for last time through
  61 : 			gauss(rowptr, b) -- Now solve for Coefficient corrections
  62 : 			ix, cmax = 1, 0.0
  63 : 			for i=1,nc do -- Loop over active coefficients, implement step change limitations
  64 : 				if actv[i]~=0 then -- and update active coefficients
  65 : 					if step[i]~=0.0 then 
  66 : 						if step[i]<0.0 then -- +/- step change limits
  67 : 							if abs(b[ix])>-step[i] then
  68 : 								if b[ix]>0.0 then b[ix] = -step[i] 
  69 : 								else b[ix] = step[i] end
  70 : 							end
  71 : 						else -- percentage change limits
  72 : 							c1 = 1. + b[ix]/c[i]
  73 : 							if c1<step[i] then b[ix] = (step[i] - 1.)*c[i] end
  74 : 							if c1>1./step[i] then b[ix] = (1./step[i] - 1.)*c[i] end
  75 : 						end
  76 : 					end
  77 : 					c1 = abs(b[ix]) -- Check on convergence
  78 : 					c2 = abs(c[i]) + c1
  79 : 					if c2~=0.0 then c1 = c1/c2 end
  80 : 					if c1>cmax then cmax = c1 end
  81 : 					c[i], ix = c[i] + b[ix], ix+1 -- Updated C's here
  82 : 				end
  83 : 			end
  84 : 			if nprint~=0 then -- Print iteration values if desired
  85 : 				printf('Coefficients at iteration %d are:\n',ilp)
  86 : 				for i=1,nc do printf(' %e ',c[i]) end; printf('\n'); flush()
  87 : 			end
  88 : 		end
  89 : 		if iend==1 then nend=ilp; break end -- End now
  90 : 		if cmax <ERROR then iend = 1 end -- Converged but once more to calculate matrix
  91 : 	end
  92 : 	local cv = minv(rowptr,jx-1) --Covariance matrix -- needed to bypass gauss for this 
  93 : 	ix, err = 1, 0.0 -- Accumulate error
  94 : 	for k=1,nd do -- Sum over data points
  95 : 		for i=1,nx do p[i] = x[i][k] end
  96 : 		c1 = x[1][k] - newtonfc(f, p, c) -- Error evaluation 
  97 : 		err = err + c1*c1 -- Square and accumulate
  98 : 	end
  99 : 	for j=1,nc do -- Calculate standard deviations of coefficients
 100 : 		if actv[j]==0 then del[j] = 0
 101 : 		else del[j],ix = sqrt(err*((type(cv)=='table' and cv[ix][ix]) or 0)/(nd-nc)),ix+1 end
 102 : 	end
 103 : 	return del, sqrt(err/nd), nend-1 -- return RMS error and # of iterations
 104 : end
